{"ast":null,"code":"var _jsxFileName = \"/Users/sakshamgambhir/Desktop/Work+Projects/Web Development/Projects/Project 12 - WearWorx/client/src/pages/Login.js\";\nimport React from \"react\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new GoogleAuthProvider();\nconst auth = getAuth();\nsignInWithPopup(auth, provider).then(result => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  // const credential = GoogleAuthProvider.credentialFromResult(result);\n  // const token = credential.accessToken;\n  // The signed-in user info.\n  const user = result.user;\n  // IdP data available using getAdditionalUserInfo(result)\n  console.log(user);\n  // ...\n}).catch(error => {\n  console.log(error);\n  // Handle Errors here.\n  // const errorCode = error.code;\n  // const errorMessage = error.message;\n  // The email of the user's account used.\n  // const email = error.customData.email;\n  // The AuthCredential type that was used.\n  // const credential = GoogleAuthProvider.credentialFromError(error);\n  // ...\n});\n\nexport const Login = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","getAuth","signInWithPopup","GoogleAuthProvider","jsxDEV","_jsxDEV","provider","auth","then","result","user","console","log","catch","error","Login","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sakshamgambhir/Desktop/Work+Projects/Web Development/Projects/Project 12 - WearWorx/client/src/pages/Login.js"],"sourcesContent":["import React from \"react\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\nconst provider = new GoogleAuthProvider();\nconst auth = getAuth();\nsignInWithPopup(auth, provider)\n  .then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    // const credential = GoogleAuthProvider.credentialFromResult(result);\n    // const token = credential.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // IdP data available using getAdditionalUserInfo(result)\n    console.log(user);\n    // ...\n  })\n  .catch((error) => {\n    console.log(error);\n    // Handle Errors here.\n    // const errorCode = error.code;\n    // const errorMessage = error.message;\n    // The email of the user's account used.\n    // const email = error.customData.email;\n    // The AuthCredential type that was used.\n    // const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n\nexport const Login = () => {\n  return <div>Login</div>;\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,eAAe,EAAEC,kBAAkB,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,QAAQ,GAAG,IAAIH,kBAAkB,CAAC,CAAC;AACzC,MAAMI,IAAI,GAAGN,OAAO,CAAC,CAAC;AACtBC,eAAe,CAACK,IAAI,EAAED,QAAQ,CAAC,CAC5BE,IAAI,CAAEC,MAAM,IAAK;EAChB;EACA;EACA;EACA;EACA,MAAMC,IAAI,GAAGD,MAAM,CAACC,IAAI;EACxB;EACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB;AACF,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;EAChBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EAClB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEJ,OAAO,MAAMC,KAAK,GAAGA,CAAA,KAAM;EACzB,oBAAOV,OAAA;IAAAW,QAAA,EAAK;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACzB,CAAC;AAACC,EAAA,GAFWN,KAAK;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}