{"ast":null,"code":"var _jsxFileName = \"/Users/sakshamgambhir/Desktop/Work+Projects/Web Development/Projects/Project 12 - WearWorx/client/src/context/UserProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport UserContext from \"./userContext\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { app } from \"../firebase.config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [loader, setLoader] = useState(false);\n  const navigate = useNavigate();\n  const provider = new GoogleAuthProvider();\n  const auth = getAuth();\n  const loginGoogle = () => {\n    setLoader(true).then(signInWithPopup(auth, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      // const credential = GoogleAuthProvider.credentialFromResult(result);\n      // const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n      // IdP data available using getAdditionalUserInfo(result)\n      console.log(user);\n      // ...\n    })).then(navigate(-1, {\n      replace: true\n    })).then(setLoader(false)).catch(error => {\n      console.log(error);\n      // Handle Errors here.\n      // const errorCode = error.code;\n      // const errorMessage = error.message;\n      // The email of the user's account used.\n      // const email = error.customData.email;\n      // The AuthCredential type that was used.\n      // const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      loginGoogle,\n      loader\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"mZjTB8+DOoD4CIC8ADuaHKNjdAE=\", false, function () {\n  return [useNavigate];\n});\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","useState","UserContext","getAuth","signInWithPopup","GoogleAuthProvider","useNavigate","app","jsxDEV","_jsxDEV","UserProvider","_ref","_s","children","loader","setLoader","navigate","provider","auth","loginGoogle","then","result","user","console","log","replace","catch","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sakshamgambhir/Desktop/Work+Projects/Web Development/Projects/Project 12 - WearWorx/client/src/context/UserProvider.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport UserContext from \"./userContext\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { app } from \"../firebase.config\";\n\nexport const UserProvider = ({ children }) => {\n  const [loader, setLoader] = useState(false);\n  const navigate = useNavigate();\n\n  const provider = new GoogleAuthProvider();\n\n  const auth = getAuth();\n  const loginGoogle = () => {\n    setLoader(true)\n      .then(\n        signInWithPopup(auth, provider).then((result) => {\n          // This gives you a Google Access Token. You can use it to access the Google API.\n          // const credential = GoogleAuthProvider.credentialFromResult(result);\n          // const token = credential.accessToken;\n          // The signed-in user info.\n          const user = result.user;\n          // IdP data available using getAdditionalUserInfo(result)\n          console.log(user);\n          // ...\n        })\n      )\n      .then(navigate(-1, { replace: true }))\n      .then(setLoader(false))\n      .catch((error) => {\n        console.log(error);\n        // Handle Errors here.\n        // const errorCode = error.code;\n        // const errorMessage = error.message;\n        // The email of the user's account used.\n        // const email = error.customData.email;\n        // The AuthCredential type that was used.\n        // const credential = GoogleAuthProvider.credentialFromError(error);\n        // ...\n      });\n  };\n  return (\n    <UserContext.Provider value={{ loginGoogle, loader }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,OAAO,EAAEC,eAAe,EAAEC,kBAAkB,QAAQ,eAAe;AAC5E,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAMe,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAMW,QAAQ,GAAG,IAAIZ,kBAAkB,CAAC,CAAC;EAEzC,MAAMa,IAAI,GAAGf,OAAO,CAAC,CAAC;EACtB,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxBJ,SAAS,CAAC,IAAI,CAAC,CACZK,IAAI,CACHhB,eAAe,CAACc,IAAI,EAAED,QAAQ,CAAC,CAACG,IAAI,CAAEC,MAAM,IAAK;MAC/C;MACA;MACA;MACA;MACA,MAAMC,IAAI,GAAGD,MAAM,CAACC,IAAI;MACxB;MACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB;IACF,CAAC,CACH,CAAC,CACAF,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAC,EAAE;MAAES,OAAO,EAAE;IAAK,CAAC,CAAC,CAAC,CACrCL,IAAI,CAACL,SAAS,CAAC,KAAK,CAAC,CAAC,CACtBW,KAAK,CAAEC,KAAK,IAAK;MAChBJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;MAClB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,CAAC;EACN,CAAC;;EACD,oBACElB,OAAA,CAACP,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEV,WAAW;MAAEL;IAAO,CAAE;IAAAD,QAAA,EAClDA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACrB,EAAA,CAxCWF,YAAY;EAAA,QAENJ,WAAW;AAAA;AAAA4B,EAAA,GAFjBxB,YAAY;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}