{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport { getFirestore, query, getDocs, collection, where, addDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCS7dNZAYmYEJA6GXKcxtioz_KhtCN0AT4\",\n  authDomain: \"wearworx-sakshxm08.firebaseapp.com\",\n  projectId: \"wearworx-sakshxm08\",\n  storageBucket: \"wearworx-sakshxm08.appspot.com\",\n  messagingSenderId: \"939214306183\",\n  appId: \"1:939214306183:web:4bc74908c5d6ef682ef122\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Google Login\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        email: user.email,\n        authProvider: \"Google\"\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\n// Email And Password\nconst signupWithEmail = async (name, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      name,\n      email,\n      authProvider: \"local\"\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport { signInWithGoogle };\n\n// // Get Users\n// const users = [];\n// const data = await getDocs(collection(db, \"users\"));\n// if (data) {\n//   data.forEach((item) => {\n//     users.push(item.data());\n//   });\n// }\n// export { users };\n// export const addUser = async (user, cart, fav) => {\n//   try {\n//     if (!users.find((userEmail) => userEmail.email === user.email)) {\n//       await setDoc(doc(db, \"users\", user.email), {\n//         name: user.displayName,\n//         email: user.email,\n//         cart: cart,\n//         fav: fav,\n//       });\n//       // console.log(\"Document written with ID: \", docRef.id);\n//     } else if (!users.find((userCart) => userCart.cart === cart)) {\n//       await updateDoc(doc(db, \"users\", user.email), {\n//         cart: cart,\n//       });\n//     } else if (!users.find((userFav) => userFav.fav === user.fav)) {\n//       await updateDoc(doc(db, \"users\", user.email), {\n//         fav: fav,\n//       });\n//     }\n//     console.log(users);\n//   } catch (e) {\n//     console.error(\"Error adding document: \", e);\n//   }\n// };\n// export const getCartData = async (user) => {\n//   const userCart = [];\n//   const userFav = [];\n//   const docRef = doc(db, \"users\", user.email);\n//   const data = await getDoc(docRef);\n//   if (data.exists()) {\n//     userCart.push(data.data().cart);\n//     userFav.push(data.data().fav);\n//     console.log(userCart, userFav);\n//   } else console.log(\"no data\");\n// };","map":{"version":3,"names":["initializeApp","GoogleAuthProvider","getAuth","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","getFirestore","query","getDocs","collection","where","addDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","db","googleProvider","signInWithGoogle","res","user","q","uid","docs","length","name","displayName","email","authProvider","err","console","error","alert","message","signupWithEmail","password"],"sources":["/Users/sakshamgambhir/Desktop/Work+Projects/Web Development/Projects/Project 12 - WearWorx/client/src/firebase/Firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {\n  GoogleAuthProvider,\n  getAuth,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail,\n  signOut,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  query,\n  getDocs,\n  collection,\n  where,\n  addDoc,\n} from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCS7dNZAYmYEJA6GXKcxtioz_KhtCN0AT4\",\n  authDomain: \"wearworx-sakshxm08.firebaseapp.com\",\n  projectId: \"wearworx-sakshxm08\",\n  storageBucket: \"wearworx-sakshxm08.appspot.com\",\n  messagingSenderId: \"939214306183\",\n  appId: \"1:939214306183:web:4bc74908c5d6ef682ef122\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Google Login\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        email: user.email,\n        authProvider: \"Google\",\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\n// Email And Password\nconst signupWithEmail = async (name, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      name,\n      email,\n      authProvider: \"local\",\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport { signInWithGoogle };\n\n// // Get Users\n// const users = [];\n// const data = await getDocs(collection(db, \"users\"));\n// if (data) {\n//   data.forEach((item) => {\n//     users.push(item.data());\n//   });\n// }\n// export { users };\n// export const addUser = async (user, cart, fav) => {\n//   try {\n//     if (!users.find((userEmail) => userEmail.email === user.email)) {\n//       await setDoc(doc(db, \"users\", user.email), {\n//         name: user.displayName,\n//         email: user.email,\n//         cart: cart,\n//         fav: fav,\n//       });\n//       // console.log(\"Document written with ID: \", docRef.id);\n//     } else if (!users.find((userCart) => userCart.cart === cart)) {\n//       await updateDoc(doc(db, \"users\", user.email), {\n//         cart: cart,\n//       });\n//     } else if (!users.find((userFav) => userFav.fav === user.fav)) {\n//       await updateDoc(doc(db, \"users\", user.email), {\n//         fav: fav,\n//       });\n//     }\n//     console.log(users);\n//   } catch (e) {\n//     console.error(\"Error adding document: \", e);\n//   }\n// };\n// export const getCartData = async (user) => {\n//   const userCart = [];\n//   const userFav = [];\n//   const docRef = doc(db, \"users\", user.email);\n//   const data = await getDoc(docRef);\n//   if (data.exists()) {\n//     userCart.push(data.data().cart);\n//     userFav.push(data.data().fav);\n//     console.log(userCart, userFav);\n//   } else console.log(\"no data\");\n// };\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,kBAAkB,EAClBC,OAAO,EACPC,eAAe,EACfC,0BAA0B,EAC1BC,8BAA8B,EAC9BC,sBAAsB,EACtBC,OAAO,QACF,eAAe;AACtB,SACEC,YAAY,EACZC,KAAK,EACLC,OAAO,EACPC,UAAU,EACVC,KAAK,EACLC,MAAM,QACD,oBAAoB;AAE3B,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,oCAAoC;EAChDC,SAAS,EAAE,oBAAoB;EAC/BC,aAAa,EAAE,gCAAgC;EAC/CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGrB,aAAa,CAACc,cAAc,CAAC;AACzC,MAAMQ,IAAI,GAAGpB,OAAO,CAACmB,GAAG,CAAC;AACzB,MAAME,EAAE,GAAGf,YAAY,CAACa,GAAG,CAAC;;AAE5B;AACA,MAAMG,cAAc,GAAG,IAAIvB,kBAAkB,CAAC,CAAC;AAC/C,MAAMwB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMvB,eAAe,CAACmB,IAAI,EAAEE,cAAc,CAAC;IACvD,MAAMG,IAAI,GAAGD,GAAG,CAACC,IAAI;IACrB,MAAMC,CAAC,GAAGnB,KAAK,CAACE,UAAU,CAACY,EAAE,EAAE,OAAO,CAAC,EAAEX,KAAK,CAAC,KAAK,EAAE,IAAI,EAAEe,IAAI,CAACE,GAAG,CAAC,CAAC;IACtE,MAAMC,IAAI,GAAG,MAAMpB,OAAO,CAACkB,CAAC,CAAC;IAC7B,IAAIE,IAAI,CAACA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1B,MAAMlB,MAAM,CAACF,UAAU,CAACY,EAAE,EAAE,OAAO,CAAC,EAAE;QACpCM,GAAG,EAAEF,IAAI,CAACE,GAAG;QACbG,IAAI,EAAEL,IAAI,CAACM,WAAW;QACtBC,KAAK,EAAEP,IAAI,CAACO,KAAK;QACjBC,YAAY,EAAE;MAChB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACpB;AACF,CAAC;;AAED;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAOT,IAAI,EAAEE,KAAK,EAAEQ,QAAQ,KAAK;EACvD,IAAI;IACF,MAAMhB,GAAG,GAAG,MAAMrB,8BAA8B,CAACiB,IAAI,EAAEY,KAAK,EAAEQ,QAAQ,CAAC;IACvE,MAAMf,IAAI,GAAGD,GAAG,CAACC,IAAI;IACrB,MAAMd,MAAM,CAACF,UAAU,CAACY,EAAE,EAAE,OAAO,CAAC,EAAE;MACpCM,GAAG,EAAEF,IAAI,CAACE,GAAG;MACbG,IAAI;MACJE,KAAK;MACLC,YAAY,EAAE;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACpB;AACF,CAAC;AACD,SAASf,gBAAgB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}